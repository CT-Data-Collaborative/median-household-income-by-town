setnames(numberMOES, numberNames)
numbersData.melt <- melt(
rbind(numberEstimates, numberMOES),
id.vars = c("FIPS", "Year", "Measure Type", "Variable"),
variable.name = "Insurance Status",
variable.factor = F,
value.name = "Value",
value.factor = F
)
percentEstimates <- data.table(
datafips$fips,
estimate(percent.without.total),
estimate(percent.without.under18),
estimate(percent.without.1864),
estimate(percent.without.65over),
estimate(percent.public.total),
estimate(percent.public.under18),
estimate(percent.public.1864),
estimate(percent.public.65over),
estimate(percent.private.total),
estimate(percent.private.under18),
estimate(percent.private.1864),
estimate(percent.private.65over),
paste(year-4, year, sep = "-"),
"Percent",
"Health Insurance"
)
percentMOES <- data.table(
datafips$fips,
standard.error(percent.without.total) * 1.645,
standard.error(percent.without.under18) * 1.645,
standard.error(percent.without.1864) * 1.645,
standard.error(percent.without.65over) * 1.645,
standard.error(percent.public.total) * 1.645,
standard.error(percent.public.under18) * 1.645,
standard.error(percent.public.1864) * 1.645,
standard.error(percent.public.65over) * 1.645,
standard.error(percent.private.total) * 1.645,
standard.error(percent.private.under18) * 1.645,
standard.error(percent.private.1864) * 1.645,
standard.error(percent.private.65over) * 1.645,
paste(year-4, year, sep = "-"),
"Percent",
"Margins of Error"
)
percentNames <- c(
"FIPS",
"All:without health insurance",
"under 18:without health insurance",
"18-64:without health insurance",
"65+:without health insurance",
"All:with public health insurance",
"under 18:with public health insurance",
"18-64:with public health insurance",
"65+:with public health insurance",
"All:with private health insurance",
"under 18:with private health insurance",
"18-64:with private health insurance",
"65+:with private health insurance",
"Year",
"Measure Type",
"Variable"
)
setnames(percentEstimates, percentNames)
setnames(percentMOES, percentNames)
percentsData.melt <- melt(
rbind(percentEstimates, percentMOES),
id.vars = c("FIPS", "Year", "Measure Type", "Variable"),
variable.name = "Insurance Status",
variable.factor = F,
value.name = "Value",
value.factor = F
)
dataset <- rbind(dataset, numbersData.melt, percentsData.melt)
}
#Final Additions, processing
# Split Age Range and Insurance Status out of "Insurance Status" column
dataset[,c("Age Range", "Insurance Status"):=do.call(Map, c(f = c, strsplit(`Insurance Status`, ":", fixed = T)))]
# Round Values according to type/variable
dataset[`Measure Type` == "Number", Value := round(Value, 0)]
dataset[`Measure Type` != "Number", Value := round(Value*100, 1)]
# Join town names by FIPS code
town_fips_dp_URL <- 'https://raw.githubusercontent.com/CT-Data-Collaborative/ct-town-list/master/datapackage.json'
town_fips_dp <- datapkg_read(path = town_fips_dp_URL)
towns <- (town_fips_dp$data[[1]])
dataset <- merge(towns, dataset, by = "FIPS", all.x=T)
dataset$`Insurance Status` <- str_to_title(dataset$`Insurance Status`)
dataset$`Age Range` <- str_to_title(dataset$`Age Range`)
dataset$`Age Range` <- factor(dataset$`Age Range`, levels = c("All", "Under 18", "18-64", "65+"))
#set final column order
dataset <- dataset %>%
select(Town, FIPS, Year, `Age Range`, `Insurance Status`, `Measure Type`, Variable, Value) %>%
arrange(Town, Year, `Age Range`, `Insurance Status`, `Measure Type`, Variable)
# Write to File
write.table(
dataset,
file.path(getwd(), "Desktop", "github", "prevention-portal", "health-insurance-coverage", "data", "health-insurance-coverage-2019_test2.csv"),
sep = ",",
row.names = F,
na = "-9999"
)
library(dplyr)
library(datapkg)
library(acs)
library(stringr)
library(reshape2)
library(data.table)
library(plyr)
source('./scripts/acsHelpers.R')
##################################################################
#
# Processing Script for Children by Family Type
# Created by Jenna Daly
# On 11/27/2017
#
##################################################################
#Setup environment
sub_folders <- list.files()
raw_location <- grep("raw", sub_folders, value=T)
path_to_raw <- (paste0(getwd(), "/", raw_location))
ctGeos <- getCTGeos()
yearList = c(2010:2019)
tn = "B09002"
acsdata <- getACSData(ctGeos, yearList=yearList, table = tn)
library(dplyr)
library(datapkg)
library(acs)
library(data.table)
source('./scripts/acsHelpers.R')
##################################################################
#
# Processing Script for Employed or Enrolled Youth
# Created by Jenna Daly
# On 11/27/2017
#
##################################################################
# ACS B14005
# Get geography object for CT and subcounty divisions
acsdata <- getACSData(
getCTGeos("town"),
yearList = 2010:2019,
table = "B14005"
)
options(scipen=9999)
dataset <- data.table()
for (data in acsdata) {
year <- data@endyear
year <- paste(as.numeric(year)-4, as.numeric(year), sep="-")
# Totals for denominator
pop.total <- acsSum(data, 1, "Total")
pop.total.m <- acsSum(data, 2, "Total Male")
pop.total.f <- acsSum(data, 16, "Total Female")
# aggregate values
#first sum appropriately
pop.youth.male <- acsSum(data, c(3, 9, 13), "Employed or Enrolled Male")
pop.youth.female <- acsSum(data, c(17, 23, 27), "Employed or Enrolled Female")
pop.youth.total <- acsSum(data, c(3, 9, 13, 17, 23, 27), "Employed or Enrolled Total")
#then divide appropriately
percent.male <- divide.acs(pop.youth.male, pop.total.m, method = "proportion")
acs.colnames(percent.male) <- "Percent Employed or Enrolled Male"
percent.female <- divide.acs(pop.youth.female, pop.total.f, method = "proportion")
acs.colnames(percent.female) <- "Percent Employed or Enrolled Female"
percent.total <- divide.acs(pop.youth.total, pop.total, method = "proportion")
acs.colnames(percent.total) <- "Percent Employed or Enrolled Total"
# merge in fips
datafips <- data.table(geography(data)[2])
# Cast to separate data frames
numberEstimates <- data.table(
datafips$Id2,
estimate(pop.total),
estimate(pop.total.m),
estimate(pop.total.f),
estimate(pop.youth.male),
estimate(pop.youth.female),
estimate(pop.youth.total),
year,
"Number",
"Employed or Enrolled Youth"
)
numberMOES <- data.table(
datafips$Id2,
standard.error(pop.total) * 1.645,
standard.error(pop.total.m) * 1.645,
standard.error(pop.total.f) * 1.645,
standard.error(pop.youth.male) * 1.645,
standard.error(pop.youth.female) * 1.645,
standard.error(pop.youth.total) * 1.645,
year,
"Number",
"Margins of Error"
)
numberNames <- c(
"FIPS",
"Number:Total:Total",
"Number:Total:Male",
"Number:Total:Female",
"Number:Youth:Male",
"Number:Youth:Female",
"Number:Youth:Total",
"Year",
"Measure Type",
"Variable"
)
setnames(numberEstimates, numberNames)
setnames(numberMOES, numberNames)
numbersData.melt <- melt(
rbind(numberEstimates, numberMOES),
id.vars = c("FIPS", "Year", "Measure Type", "Variable"),
variable.name = "Employed or Enrolled Youth",
variable.factor = F,
value.name = "Value",
value.factor = F
)
percentEstimates <- data.table(
datafips$Id2,
estimate(percent.male),
estimate(percent.female),
estimate(percent.total),
year,
"percent",
"Employed or Enrolled Youth"
)
percentMOES <- data.table(
datafips$Id2,
standard.error(percent.male) * 1.645,
standard.error(percent.female) * 1.645,
standard.error(percent.total) * 1.645,
year,
"percent",
"Margins of Error"
)
percentNames <- c(
"FIPS",
"Percent:Youth:Male",
"Percent:Youth:Female",
"Percent:Youth:Total",
"Year",
"Measure Type",
"Variable"
)
setnames(percentEstimates, percentNames)
setnames(percentMOES, percentNames)
percentsData.melt <- melt(
rbind(percentEstimates, percentMOES),
id.vars = c("FIPS", "Year", "Measure Type", "Variable"),
variable.name = "Employed or Enrolled Youth",
variable.factor = F,
value.name = "Value",
value.factor = F
)
dataset <- rbind(dataset, numbersData.melt, percentsData.melt)
}
# Parse gender, variable out of "var" column
dataset[,c("Measure Type", "Type", "Gender"):=do.call(Map, c(f = c, strsplit(`Employed or Enrolled Youth`, ":", fixed = T)))]
dataset <- dataset[dataset$Type == "Youth",]
dataset$Type <- NULL
dataset$`Employed or Enrolled Youth` <- NULL
dataset$FIPS <- gsub("^", "0", dataset$FIPS)
#Merge in towns by FIPS
town_fips_dp_URL <- 'https://raw.githubusercontent.com/CT-Data-Collaborative/ct-town-list/master/datapackage.json'
town_fips_dp <- datapkg_read(path = town_fips_dp_URL)
towns <- (town_fips_dp$data[[1]])
dataset <- merge(towns, dataset, by = "FIPS", all.x=T)
# Round Values according to type/variable
dataset <- as.data.table(dataset)
dataset[`Measure Type` == "Number", Value := round(Value, 0)]
dataset[`Measure Type` != "Number", Value := round(Value*100, 2)]
dataset$Value[dataset$Value == "NaN"] <- NA
dataset$Gender <- factor(dataset$Gender, levels = c("Total", "Female", "Male"))
# Select and sort columns
dataset <- dataset %>%
select(Town, FIPS, Year, Gender, `Measure Type`, Variable, Value) %>%
arrange(Town, Year, Gender, `Measure Type`, Variable)
# write to table
write.table(
dataset,
file.path(getwd(), "data", "employed-or-enrolled-youth-2019_test.csv"),
sep = ",",
row.names = F,
na="-9999"
)
setwd("/Users/niqtoliver/Desktop/github/prevention-portal/median-household-income-by-town")
getwd()
library(dplyr)
library(acs)
library(datapkg)
library(tidyr)
source('./scripts/acsHelpers.R')
##################################################################
#
# Processing Script for Median Household Income by Town
# Created by Jenna Daly
# On 11/27/2017
#
##################################################################
#Setup environment
sub_folders <- list.files()
raw_location <- grep("raw", sub_folders, value=T)
path_to_raw_data <- (paste0(getwd(), "/", raw_location))
x2016_files <- dir(path_to_raw_data, recursive=T, pattern = "ACS")
#Get state data
geography=geo.make(state=09)
yearlist=c(2009:2016)
span = 5
col.names="pretty"
key="ed0e58d2538fb239f51e01643745e83f380582d7"
options(scipen=999)
tables <- c("", "A", "B", "C", "D", "E", "F", "G", "H", "I")
races <- c("All", "White Alone", "Black or African American Alone", "American Indian and Alaska Native Alone",
"Asian Alone", "Native Hawaiian and Other Pacific Islander", "Some Other Race Alone",
"Two or More Races", "White Alone Not Hispanic or Latino", "Hispanic or Latino")
state_data <- data.table()
for (i in seq_along(yearlist)) {
endyear = yearlist[i]
inter_data <- data.table()
for (j in seq_along(tables)) {
tbl <- tables[j]
race <- races[j]
data <- acs.fetch(geography=geography, endyear=endyear, span=span,
table.number=paste0("B19013", tbl), col.names=col.names, key=key)
year <- data@endyear
print(paste("Processing: ", year, race))
year <- paste(year-4, year, sep="-")
geo <- data@geography
geo$NAME <- NULL
income <- acsSum(data, 1, "Median Household Income")
estimates <- data.table(
geo,
estimate(income),
year,
race,
"Number",
"Median Household Income"
)
moes <- data.table(
geo,
standard.error(income) * 1.645,
year,
race,
"Number",
"Margins of Error"
)
numberNames <- c(
"FIPS",
"Total",
"Year",
"Race/Ethnicity",
"Measure Type",
"Variable"
)
setnames(estimates, numberNames)
setnames(moes, numberNames)
numbersData.melt <- melt(
rbind(estimates, moes),
id.vars=c("FIPS", "Year", "Measure Type", "Variable", "Race/Ethnicity"),
variable.name="Median Household Income",
variable.factor = F,
value.name="Value",
value.factor = F
)
inter_data <- rbind(inter_data, numbersData.melt)
}
state_data <- rbind(state_data, inter_data)
}
#Get town data
geography=geo.make(state=09, county="*", county.subdivision = "*")
town_data <- data.table()
for (i in seq_along(yearlist)) {
endyear = yearlist[i]
inter_data <- data.table()
for (j in seq_along(tables)) {
tbl <- tables[j]
race <- races[j]
data <- acs.fetch(geography=geography, endyear=endyear, span=span,
table.number=paste0("B19013", tbl), col.names=col.names, key=key)
year <- data@endyear
print(paste("Processing: ", year, race))
year <- paste(year-4, year, sep="-")
geo <- data@geography
geo$county <- sprintf("%02d", geo$county)
geo$county <- gsub("^", "090", geo$county)
geo$FIPS <- paste0(geo$county, geo$countysubdivision)
geo$state <- NULL
geo$NAME <- NULL
geo$countysubdivision <- NULL
geo$county <- NULL
income <- acsSum(data, 1, "Median Household Income")
estimates <- data.table(
geo,
estimate(income),
year,
race,
"Number",
"Median Household Income"
)
moes <- data.table(
geo,
standard.error(income) * 1.645,
year,
race,
"Number",
"Margins of Error"
)
numberNames <- c(
"FIPS",
"Total",
"Year",
"Race/Ethnicity",
"Measure Type",
"Variable"
)
setnames(estimates, numberNames)
setnames(moes, numberNames)
numbersData.melt <- melt(
rbind(estimates, moes),
id.vars=c("FIPS", "Year", "Measure Type", "Variable", "Race/Ethnicity"),
variable.name="Median Household Income",
variable.factor = F,
value.name="Value",
value.factor = F
)
inter_data <- rbind(inter_data, numbersData.melt)
}
town_data <- rbind(town_data, inter_data)
}
#process 2016 data
races_for_2016 <- c("White Alone", "Black or African American Alone", "American Indian and Alaska Native Alone",
"Asian Alone", "Native Hawaiian and Other Pacific Islander", "Some Other Race Alone",
"Two or More Races", "White Alone Not Hispanic or Latino", "Hispanic or Latino", "All")
x2016_data <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(x2016_files)) {
data <- read.acs(paste0(path_to_raw_data, "/", x2016_files[i]), endyear=2016, span=5)
race <- races_for_2016[i]
year <- data@endyear
year <- paste(year-4, year, sep="-")
geo <- data@geography
geo$Geography <- NULL
geo$Id2 <- gsub("^", "0", geo$Id2)
geo$Id <- NULL
income <- acsSum(data, 1, "Median Household Income")
estimates <- data.table(
geo,
estimate(income),
year,
race,
"Number",
"Median Household Income"
)
moes <- data.table(
geo,
standard.error(income) * 1.645,
year,
race,
"Number",
"Margins of Error"
)
numberNames <- c(
"FIPS",
"Total",
"Year",
"Race/Ethnicity",
"Measure Type",
"Variable"
)
setnames(estimates, numberNames)
setnames(moes, numberNames)
numbersData.melt <- melt(
rbind(estimates, moes),
id.vars=c("FIPS", "Year", "Measure Type", "Variable", "Race/Ethnicity"),
variable.name="Median Household Income",
variable.factor = F,
value.name="Value",
value.factor = F
)
x2016_data <- rbind(x2016_data, numbersData.melt)
}
med_income <- rbind(town_data, state_data, x2016_data)
med_income_wide <- spread(med_income, Variable, Value)
names(med_income_wide)[5] <- "Total"
med_income_wide <- med_income_wide[med_income_wide$FIPS != "0900100000",]
#create CT df to merge with original to caluate ratios
ct_value <- med_income_wide[med_income_wide$FIPS == "09",]
merge <- merge(med_income_wide, ct_value, by = c("Year", "Race/Ethnicity", "Measure Type", "Total"))
merge$`Ratio to State Median Num` <- merge$`Median Household Income.x` / merge$`Median Household Income.y`
merge$`Ratio to State Median MOE` <- sqrt((merge$`Margins of Error.x`)^2 + ((merge$`Median Household Income.x`/merge$`Median Household Income.y`)*((merge$`Margins of Error.y`)^2))) / (merge$`Median Household Income.x`)
merge <- merge %>%
select(FIPS.x, Year, `Race/Ethnicity`, `Measure Type`, `Margins of Error.x`,
`Median Household Income.x`, `Ratio to State Median Num`, `Ratio to State Median MOE`)
#Merge in FIPS
town_fips_dp_URL <- 'https://raw.githubusercontent.com/CT-Data-Collaborative/ct-town-list/master/datapackage.json'
town_fips_dp <- datapkg_read(path = town_fips_dp_URL)
towns <- (town_fips_dp$data[[1]])
towns <- as.data.table(towns)
merge_fips <- merge(merge, towns, by.x="FIPS.x", by.y = "FIPS", all.y=T)
data_long <- gather(merge_fips, `Variable`, Value, 5:8)
#Clean up columns
data_long$`Measure Type`[grepl("Ratio", data_long$Variable)] <- "Ratio to State Median"
data_long$Variable <- gsub(".x", "", data_long$Variable)
data_long$Variable[grepl("MOE", data_long$Variable)] <- "Margins of Error"
data_long$Variable[grepl("Num", data_long$Variable)] <- "Median Household Income"
names(data_long)[names(data_long) == "FIPS.x"] <- "FIPS"
data_long$Value <-  round(data_long$Value, 2)
data_long <- data_long %>%
select(Town, FIPS, Year, `Race/Ethnicity`, `Measure Type`, Variable, Value) %>%
arrange(Town, Year, `Race/Ethnicity`, `Measure Type`, Variable)
write.table(
data_long,
file.path("data", "median-household-income-town-2016_test.csv"),
sep = ",",
row.names = F,
na = "-9999"
)
